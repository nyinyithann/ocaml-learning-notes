(* open Core *)
(* open UI_display *)
(* open UI_menu *)
(* open UI_prompt *)
(* open Common *)

(* let get_sort_field v = *)
(*   let msg = "Enter sort field (id or url or tags or date): " *)
(*   and retry_msg = *)
(*     {|Sort field should be either one of 'id' or 'url' or 'tags' or 'date': |} *)
(*   and validate input = validate_fields [ "id"; "url"; "tags"; "date" ] input in *)
(*   (match v with *)
(*    | None | Some "" -> None *)
(*    | Some x -> *)
(*      if validate x *)
(*      then Some x *)
(*      else Some (ask_again_if_invalid ~validate ~msg ~retry_msg ())) *)
(*   |> Option.map ~f:String.strip *)
(* ;; *)

(* let get_sort_order v = *)
(*   let msg = "Enter sort order (asc or desc): " *)
(*   and retry_msg = {|Sort order should be either one of 'asc' or 'desc": |} *)
(*   and validate input = validate_fields [ "asc"; "desc" ] input in *)
(*   (match v with *)
(*    | None | Some "" -> None *)
(*    | Some x -> *)
(*      if validate x *)
(*      then Some x *)
(*      else Some (ask_again_if_invalid ~validate ~msg ~retry_msg ())) *)
(*   |> Option.map ~f:String.strip *)
(* ;; *)

(* let rec ls ?sort_field ?sort_order () = *)
(*   new_line (); *)
(*   let sort_field = get_sort_field sort_field in *)
(*   let sort_order = get_sort_order sort_order in *)
(*   let state = State.create () in *)
(*   State.set_mode state (Some (Model.List { sort_field; sort_order })); *)
(*   ListSearch_helper.ls_aux ~state ~ls *)
(* ;; *)
